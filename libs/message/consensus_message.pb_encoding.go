// Code generated by fastssz. DO NOT EDIT.
// Hash: d2b851c7964d8e2e76a8f09aa909f1ec54f9ba4c42195dd2c01ee4a384e8993e
// Version: 0.1.3
package message

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ConsensusEnvelope object
func (c *ConsensusEnvelope) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConsensusEnvelope object to a target array
func (c *ConsensusEnvelope) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(24)

	// Offset (0) 'Raw'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'SenderAddr'
	if size := len(c.SenderAddr); size != 20 {
		err = ssz.ErrBytesLengthFn("ConsensusEnvelope.SenderAddr", size, 20)
		return
	}
	dst = append(dst, c.SenderAddr...)

	// Field (0) 'Raw'
	if size := len(c.Raw); size > 1048576 {
		err = ssz.ErrBytesLengthFn("ConsensusEnvelope.Raw", size, 1048576)
		return
	}
	dst = append(dst, c.Raw...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConsensusEnvelope object
func (c *ConsensusEnvelope) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 24 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Raw'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 24 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'SenderAddr'
	if cap(c.SenderAddr) == 0 {
		c.SenderAddr = make([]byte, 0, len(buf[4:24]))
	}
	c.SenderAddr = append(c.SenderAddr, buf[4:24]...)

	// Field (0) 'Raw'
	{
		buf = tail[o0:]
		if len(buf) > 1048576 {
			return ssz.ErrBytesLength
		}
		if cap(c.Raw) == 0 {
			c.Raw = make([]byte, 0, len(buf))
		}
		c.Raw = append(c.Raw, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConsensusEnvelope object
func (c *ConsensusEnvelope) SizeSSZ() (size int) {
	size = 24

	// Field (0) 'Raw'
	size += len(c.Raw)

	return
}

// HashTreeRoot ssz hashes the ConsensusEnvelope object
func (c *ConsensusEnvelope) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConsensusEnvelope object with a hasher
func (c *ConsensusEnvelope) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Raw'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(c.Raw))
		if byteLen > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(c.Raw)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1048576+31)/32)
	}

	// Field (1) 'SenderAddr'
	if size := len(c.SenderAddr); size != 20 {
		err = ssz.ErrBytesLengthFn("ConsensusEnvelope.SenderAddr", size, 20)
		return
	}
	hh.PutBytes(c.SenderAddr)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ConsensusEnvelope object
func (c *ConsensusEnvelope) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
