// Code generated by fastssz. DO NOT EDIT.
// Hash: c3edf6a28d64810f72dab76bc36237561367be1d5409dc89047cffc10c7d86bd
// Version: 0.1.3
package message

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the RPCEnvelope object
func (r *RPCEnvelope) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the RPCEnvelope object to a target array
func (r *RPCEnvelope) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(9)

	// Field (0) 'MsgType'
	dst = ssz.MarshalUint32(dst, r.MsgType)

	// Offset (1) 'Raw'
	dst = ssz.WriteOffset(dst, offset)

	// Field (2) 'IsResponse'
	dst = ssz.MarshalBool(dst, r.IsResponse)

	// Field (1) 'Raw'
	if size := len(r.Raw); size > 1048576 {
		err = ssz.ErrBytesLengthFn("RPCEnvelope.Raw", size, 1048576)
		return
	}
	dst = append(dst, r.Raw...)

	return
}

// UnmarshalSSZ ssz unmarshals the RPCEnvelope object
func (r *RPCEnvelope) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 9 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'MsgType'
	r.MsgType = ssz.UnmarshallUint32(buf[0:4])

	// Offset (1) 'Raw'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 9 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'IsResponse'
	r.IsResponse = ssz.UnmarshalBool(buf[8:9])

	// Field (1) 'Raw'
	{
		buf = tail[o1:]
		if len(buf) > 1048576 {
			return ssz.ErrBytesLength
		}
		if cap(r.Raw) == 0 {
			r.Raw = make([]byte, 0, len(buf))
		}
		r.Raw = append(r.Raw, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the RPCEnvelope object
func (r *RPCEnvelope) SizeSSZ() (size int) {
	size = 9

	// Field (1) 'Raw'
	size += len(r.Raw)

	return
}

// HashTreeRoot ssz hashes the RPCEnvelope object
func (r *RPCEnvelope) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the RPCEnvelope object with a hasher
func (r *RPCEnvelope) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgType'
	hh.PutUint32(r.MsgType)

	// Field (1) 'Raw'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(r.Raw))
		if byteLen > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(r.Raw)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1048576+31)/32)
	}

	// Field (2) 'IsResponse'
	hh.PutBool(r.IsResponse)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the RPCEnvelope object
func (r *RPCEnvelope) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(r)
}
