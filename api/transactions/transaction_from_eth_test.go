package transactions_test

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/ethereum/go-ethereum/core/types"
	"github.com/meterio/meter-pov/meter"
	"github.com/meterio/meter-pov/tx"
	"github.com/stretchr/testify/assert"
)

func TestNewTransactionFromEth(t *testing.T) {
	meter.InitBlockChainConfig("main")
	raw, err := hex.DecodeString("02f901bf5284feff18dd85746a52880085746a5288008301491a9423894d2937a2a4a479f0407909da5b028049568e8810a741a462780000b9014473c45c98000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000004010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000693f27a995712a60000000000000000000000000000000000000000000000000000000000000014d43aed68edad9552f9f6a8081ae6d8912a314fea00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000c001a0cb22e95530339d5361620c1fdf7c36363c4ac79c56d013f5ca3ab6ca3ed295f5a0747ac3055aaf9fcb555d93598c82245071490d6d6468c5ab0ad46f67a6807023")
	assert.Nil(t, err)

	ethTx := types.Transaction{}
	err = ethTx.UnmarshalBinary(raw)
	assert.Nil(t, err)

	chainTag := byte(0x52)
	blockID := meter.MustParseBytes32("0x023ccc876908369cc06fce77fba88f1100cb402a6fc282b26e9d3214de52e591")
	blockRef := tx.NewBlockRefFromID(blockID)
	nativeTx, err := tx.NewTransactionFromEthTx(&ethTx, chainTag, blockRef, true)

	assert.Nil(t, err)
	fmt.Println(nativeTx)
}
