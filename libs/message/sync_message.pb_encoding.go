// Code generated by fastssz. DO NOT EDIT.
// Hash: 5a61c41d0f1cba308d35ce1e1b4675d3b9a83e921976a395de1ff342970dbbe1
// Version: 0.1.3
package message

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the RPCRequestEnvelope object
func (r *RPCRequestEnvelope) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the RPCRequestEnvelope object to a target array
func (r *RPCRequestEnvelope) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Field (0) 'Enum'
	dst = ssz.MarshalUint32(dst, r.Enum)

	// Offset (1) 'Raw'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Raw'
	if size := len(r.Raw); size > 1048576 {
		err = ssz.ErrBytesLengthFn("RPCRequestEnvelope.Raw", size, 1048576)
		return
	}
	dst = append(dst, r.Raw...)

	return
}

// UnmarshalSSZ ssz unmarshals the RPCRequestEnvelope object
func (r *RPCRequestEnvelope) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Enum'
	r.Enum = ssz.UnmarshallUint32(buf[0:4])

	// Offset (1) 'Raw'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Raw'
	{
		buf = tail[o1:]
		if len(buf) > 1048576 {
			return ssz.ErrBytesLength
		}
		if cap(r.Raw) == 0 {
			r.Raw = make([]byte, 0, len(buf))
		}
		r.Raw = append(r.Raw, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the RPCRequestEnvelope object
func (r *RPCRequestEnvelope) SizeSSZ() (size int) {
	size = 8

	// Field (1) 'Raw'
	size += len(r.Raw)

	return
}

// HashTreeRoot ssz hashes the RPCRequestEnvelope object
func (r *RPCRequestEnvelope) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the RPCRequestEnvelope object with a hasher
func (r *RPCRequestEnvelope) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Enum'
	hh.PutUint32(r.Enum)

	// Field (1) 'Raw'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(r.Raw))
		if byteLen > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(r.Raw)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1048576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the RPCRequestEnvelope object
func (r *RPCRequestEnvelope) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(r)
}

// MarshalSSZ ssz marshals the RPCResponseEnvelope object
func (r *RPCResponseEnvelope) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the RPCResponseEnvelope object to a target array
func (r *RPCResponseEnvelope) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Field (0) 'Enum'
	dst = ssz.MarshalUint32(dst, r.Enum)

	// Offset (1) 'Raw'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Raw'
	if size := len(r.Raw); size > 1048576 {
		err = ssz.ErrBytesLengthFn("RPCResponseEnvelope.Raw", size, 1048576)
		return
	}
	dst = append(dst, r.Raw...)

	return
}

// UnmarshalSSZ ssz unmarshals the RPCResponseEnvelope object
func (r *RPCResponseEnvelope) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Enum'
	r.Enum = ssz.UnmarshallUint32(buf[0:4])

	// Offset (1) 'Raw'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Raw'
	{
		buf = tail[o1:]
		if len(buf) > 1048576 {
			return ssz.ErrBytesLength
		}
		if cap(r.Raw) == 0 {
			r.Raw = make([]byte, 0, len(buf))
		}
		r.Raw = append(r.Raw, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the RPCResponseEnvelope object
func (r *RPCResponseEnvelope) SizeSSZ() (size int) {
	size = 8

	// Field (1) 'Raw'
	size += len(r.Raw)

	return
}

// HashTreeRoot ssz hashes the RPCResponseEnvelope object
func (r *RPCResponseEnvelope) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the RPCResponseEnvelope object with a hasher
func (r *RPCResponseEnvelope) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Enum'
	hh.PutUint32(r.Enum)

	// Field (1) 'Raw'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(r.Raw))
		if byteLen > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(r.Raw)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1048576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the RPCResponseEnvelope object
func (r *RPCResponseEnvelope) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(r)
}
